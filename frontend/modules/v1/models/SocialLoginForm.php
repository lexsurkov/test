<?php
/**
 * Created by PhpStorm.
 * User: surkov
 * Date: 18.04.17
 * Time: 10:26
 */

namespace api\v1\models;

use common\models\Account;
use common\models\Profile;
use common\models\User;
use Yii;
use yii\base\Model;

/**
 * SocialLoginForm form
 * @property $provider string
 * @property $client_id string
 * @property $social_token string
 *
 */
class SocialLoginForm extends Model
{
    public $provider;
    public $client_id;
    public $social_token;
    public $password;

    public $user_id;
    public $name;
    public $surname;
    public $email;
    public $image_url;

    private $_isProfile;
    
    private $_user;
    
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->_isProfile  = true;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['client_id','provider','social_token'], 'trim'],
            [['client_id','provider','social_token'], 'required'],
            [['name','surname','email'],'string'],
            ['user_id','integer'],
        ];
    }

    /**
     * Validates the password.
     * This method serves as the inline validation for password.
     *
     * @param string $attribute the attribute currently being validated
     * @param array $params the additional name-value pairs given in the rule
     */
    public function validatePassword($attribute, $params)
    {
        if (!$this->hasErrors()) {
            $user = $this->getUser();
            if (!$user || !$user->validatePassword($this->password)) {
                $this->addError($attribute, 'Incorrect username or password.');
            }
        }
    }

    public function login()
    {
        $this->password = Yii::$app->security->generateRandomString();
        if (!$this->validate()){
            return null;
        }

        // привязка социальной сети если был передан ИД пользователя
        $user = ($this->user_id) ? User::findOne($this->user_id) : null;
        if (!$user){
            // ИД не был передан проверим сцщуствует ли соц сеть у пользователя
            $account = Account::findOne(['provider'=>$this->provider,'client_id'=>$this->client_id]);
            $user = ($account) ? $account->user : null;
        }
        if (!$user){
            $user = User::findByPhone($this->provider.'-'.$this->client_id);
            if (!$user) {
                $user = new User();
                $user->phone = $this->provider.'-'.$this->client_id;
                $user->setPassword($this->password);
                $user->generateAuthKey();
                if (!$user->save()){
                    $this->_isProfile = false;
                    return null;
                }
            }
        }

        $this->_isProfile = true;
        if (!Profile::findOne($user->id)){
            $profile = new Profile();
            $profile->user_id = $user->id;
            $profile->name = $this->name;
            $profile->surname = $this->surname;
            $profile->email = $this->email;

            if ($this->image_url){
                $filename = basename(explode("?",$this->image_url)[0]);
                $path = Yii::getAlias("@frontend/web/upload/images/store/".$filename);
                file_put_contents($path, file_get_contents($this->image_url));
                $model = $profile->user;
                if ($_img = $model->getImage()){
                    $model->removeImage($_img);
                }
                $model->attachImage($path);
            }

            $this->_isProfile = false;
            if (!$profile->save()){
                return null;
            }
        }

        $account = Account::findOne([
            'provider' => $this->provider,
            'client_id' => $this->client_id,
        ]);
        if (!$account) {
            $account = new Account();
            $account->user_id = $user->id;
            $account->provider = $this->provider;
            $account->client_id = $this->client_id;
        }
        $account->social_token = $this->social_token;
        if (!$account->save()){
            return null;
        }

        return $user;
    }
    
    public function isUserAccount(){
        $account = Account::findOne([
            'provider' => $this->provider,
            'client_id' => $this->client_id,
        ]);
        return (isset($account) && isset($this->user_id)) ? (($account->user_id != $this->user_id) ? true : false) : false;
    }

    /**
     * Finds user by [[username]]
     *
     * @return User|null
     */
    protected function getUser()
    {
        if ($this->_user === null) {
            $this->_user = User::findByPhone($this->client_id);
        }

        return $this->_user;
    }

    /**
     * @return mixed
     */
    public function getIsProfile()
    {
        return $this->_isProfile;
    }
}
